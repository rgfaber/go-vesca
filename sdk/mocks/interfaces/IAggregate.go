// Code generated by mockery v2.12.1. DO NOT EDIT.

package mocks

import (
	interfaces "github.com/rgfaber/go-vesca/sdk/interfaces"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// IAggregate is an autogenerated mock type for the IAggregate type
type IAggregate struct {
	mock.Mock
}

// Apply provides a mock function with given fields: evt
func (_m *IAggregate) Apply(evt interfaces.IEvt) {
	_m.Called(evt)
}

// Attempt provides a mock function with given fields: cmd
func (_m *IAggregate) Attempt(cmd interfaces.ICmd) interfaces.IFbk {
	ret := _m.Called(cmd)

	var r0 interfaces.IFbk
	if rf, ok := ret.Get(0).(func(interfaces.ICmd) interfaces.IFbk); ok {
		r0 = rf(cmd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.IFbk)
		}
	}

	return r0
}

// NewIAggregate creates a new instance of IAggregate. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewIAggregate(t testing.TB) *IAggregate {
	mock := &IAggregate{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
