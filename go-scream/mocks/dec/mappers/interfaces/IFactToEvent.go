// Code generated by mockery v2.12.1. DO NOT EDIT.

package mocks

import (
	interfaces "github.com/rgfaber/go-vesca/sdk/interfaces"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// IFactToEvent is an autogenerated mock type for the IFactToEvent type
type IFactToEvent struct {
	mock.Mock
}

// Map provides a mock function with given fields: _a0
func (_m *IFactToEvent) Map(_a0 interfaces.IFact) interfaces.IEvt {
	ret := _m.Called(_a0)

	var r0 interfaces.IEvt
	if rf, ok := ret.Get(0).(func(interfaces.IFact) interfaces.IEvt); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.IEvt)
		}
	}

	return r0
}

// NewIFactToEvent creates a new instance of IFactToEvent. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewIFactToEvent(t testing.TB) *IFactToEvent {
	mock := &IFactToEvent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
